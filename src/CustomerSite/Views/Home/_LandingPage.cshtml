@*@using Microsoft.Marketplace.SaasKit.Models*@

@using Marketplace.SaaS.Accelerator.Services.Models
@model Marketplace.SaaS.Accelerator.Services.Models.SubscriptionResultExtension

@{
    ViewData["Title"] = "Home";
}
@if (!Model.ShowWelcomeScreen)
{
    <div class="cm-container" id="divHome">
        <form method="post" id="frmIndex">

            <div class="text-black mt20">
                <span class="cm-section-heading-scale-subscription">Thanks for Subscribing to the Scale GenAI Platform!</span>
            </div>
            @if (Model != null && !string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Some Error Occurred During Operation!
                </div>
            }
            else
            {
                <div class="sgp-panel-default mt20">
                    <div class="text-black mt20">
                        <span class="cm-section-sub-heading">What's next?</span>
                    </div>
                    <div class="text-black mt20">
                        After completing the form below, we will review and process your request. Please look out for an email from the Scale AI team with the next steps.
                    </div>
                    <div class="text-black mt20">
                        <span class="cm-section-sub-heading">Subscription Info</span>
                    </div>
                    <div class="cm-panel-subscription-info">
                        <dl class="row text-left">
                            <dt class="col-sm-3 p-2 p10">
                                @Html.DisplayName("Customer Identity")
                            </dt>
                            <dd class="col-sm-9 p-2 p10" style="display: flex;">
                                <div class="customer-info-row">
                                    <div>
                                        @Html.DisplayFor(model => model.CustomerName)
                                    </div>
                                    <div>
                                        @Html.DisplayFor(model => model.CustomerEmailAddress)
                                    </div>
                                    <div>
                                        @Html.DisplayFor(model => model.Id)
                                        <button onclick="CopyToClipboard('@Model.Id')" class="copy-button"><i class="fa-regular fa-copy"></i></button>
                                    </div>
                                </div>
                            </dd>
                            <dt class="col-sm-3 p-2 p10">
                                @Html.DisplayName("Offer Name ")
                            </dt>
                            <dd class="col-sm-9 p-2 p10">
                                @Html.DisplayFor(model => model.OfferId)
                            </dd>
                            <dt class="col-sm-3 p-2 p10">
                                @Html.DisplayName("Subscription Status ")
                            </dt>
                            <dd class="col-sm-9 p-2 p10">
                                <span class="subscription-status">
                                    @Html.DisplayFor(model => model.SubscriptionStatus)
                                </span>
                            </dd>
                            <dt class="col-sm-3 p-2 p10">
                                @Html.DisplayName("Subscription Plan ")
                            </dt>
                            <dd class="col-sm-9 p-2 p10">
                                <span class="subscription-plan">
                                    @Html.DisplayFor(model => model.PlanId)
                                </span>
                            </dd>
                            <dt class="col-sm-3 p-2 p10">
                                @Html.DisplayName("Azure Tenant ID ")
                            </dt>
                            <dd class="col-sm-9 p-2 p10">
                                <span class="tenant-id">
                                    @Html.DisplayFor(model => model.Purchaser.TenantId)
                                    @Html.HiddenFor(model => model.Purchaser.TenantId)
                                </span>
                                <button onclick="CopyToClipboard('@Model.Purchaser.TenantId')" class="copy-button"><i class="fa-regular fa-copy"></i></button>
                            </dd>
                        </dl>
                    </div>
                    <dl>
                        @if (Model.SubscriptionParameters != null && Model.SubscriptionParameters.Count() > 0)
                        {

                            for (int i = 0; i < Model.SubscriptionParameters.Count(); i++)
                            {
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Id)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanAttributeId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].ValueType)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].OfferId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].SubscriptionId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].DisplayName)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Type)

                                if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    <dt class="col-sm-3-normal-font p-2 p10 @Model.SubscriptionParameters[i].Type">
                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName, new { required = "required", @class = @Model.SubscriptionParameters[i].Type })
                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                        {<span class="black-star @Model.SubscriptionParameters[i].Type">*</span>}


                                    </dt>
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dt class="col-sm-3-normal-font p-2 p10 @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName)
                                        </dt>
                                    }
                                }

                                @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    @if (Model.SubscriptionParameters[i].FromList == true)
                                    {
                                        var data = Model.SubscriptionParameters[i].ValuesList;
                                        var selectList = new SelectList(data.Split(','));


                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }
                                            else
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }

                                        </dd>

                                    }
                                    else if (Model.SubscriptionParameters[i].Htmltype == "date")
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                    else
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dd class="col-sm-9 p-2 p10  @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].Value)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Value)
                                        </dd>
                                    }
                                }
                            }

                        }
                    </dl>
                    @if (model.PlanId != "multi-tenant-saas-demo")
                    {
                        <input type="checkbox" class="agreementsCheckbox"/> I agree to Scale's <a href="https://scale.com/legal/msa" class="legal-terms" target="_blank">Main Services Agreement</a> and acknowledge Scale's <a href="https://scale.com/legal/privacy" class="legal-terms" target="_blank">Privacy Policy</a>
                        <div>
                            <input type="checkbox" class="trialAccessCheckbox"/> I also agree that:
                        </div>
                        <ul>
                            <li>My access to Scale GenAI Platform is on a trial and evaluation basis.</li>
                            <li>I will not use the trial version of Scale GenAI Platform for commercial or production purposes.</li>
                            <li>I will not disclose to a third party any output generated by a machine learning model hosted by the trial version of Scale GenAI Platform.</li>
                            <li>Scale may terminate my trial access to Scale GenAI Platform at any time.</li>
                        </ul>
                    }
                </div>
                <div class="text-end">
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.Subscribed)
                    {
                        <button type="submit" asp-action="SubscriptionOperation" asp-route-subscriptionId="@Model.Id" asp-route-planId="@Model.PlanId" asp-route-operation="Deactivate" class="cm-button-danger text-right">Unsubscribe</button>
                        <button type="submit" asp-action="Subscriptions" class="cm-button-default text-end">Go to Subscription List</button>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == true)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end">Activate</a>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == false)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-end" style="text-decoration:none;">&#x2713; Activate</a>
                    }
                </div>
            }
        </form>
    </div>
}
else
{
    <div class="pt-5">
        <div class="card p-3 ">
            <div class="text-center">
                <h1 class="display-4">Welcome</h1>
            </div>
            <div class="text-left">
                <p>
                    Get started with integrating your <b> Software as a Service (SaaS) </b> solution with the <b> SaaS fulfillment APIs version 2 in Microsoft commercial marketplace. </b>
                </p>
                <p><a href="https://docs.microsoft.com/en-us/azure/marketplace/partner-center-portal/pc-saas-fulfillment-api-v2" target="_blank">Click here </a><span>for the API documentation.</span> </p>
            </div>
            <div>
                <b>To purchase this SaaS offer:</b>
                <ul>
                    <li>Search for resources of type <b> Software as a Service (SaaS) </b></li>
                    <li>Search for your offer</li>
                    <li>Click <b> Create</b> to subscribe to the offer</li>
                    <li>Click <b>Configure Account </b> after the subscription created</li>
                </ul>
            </div>
        </div>
    </div>
}
<script type="text/javascript">

    function CopyToClipboard(copyText) 
    {
        navigator.clipboard.writeText(copyText)
          .then(() => { alert('Copied to clipboard.') })
          .catch((error) => { alert('Copy failed. Error: ${error}') })
    }

    function SubscriptionOperation(subscriptionId, planId, operation) {
        if (validate(planId)) {
            var formobject = $('#frmIndex').serialize();
            $.ajax({
                url: '/Home/SubscriptionOperation',
                type: 'POST',
                data: formobject + "&subscriptionId=" + subscriptionId + "&planId=" + planId + "&operation=" + operation,
                cache: false,
                success: function (result) {
                    $('#divIndex').html(result);
                },
                Error:
                    function (result) {
                        $('#divIndex').html(result);
                    }
            });
        }
        else {
            swal({
                title: "Required",
                text: "Please fill all required values",
                icon: "warning"
            })

        }
    }


    function validate(planId) {
        var valid = true;
        $(':input[required]:visible').each(function () {
            if ($(this).val() == "") //check loginc here
                return valid = false;
        });
        if (planId != "multi-tenant-saas-demo") {
            var isCheckedTerms = $(".agreementsCheckbox").is(':checked');
            if (!isCheckedTerms) {
                return valid = false;
            }
            var isCheckedTrialAccess = $(".trialAccessCheckbox").is(':checked');
            if (!isCheckedTrialAccess) {
                return valid = false;
            }
        }
        return valid;
    }
</script>